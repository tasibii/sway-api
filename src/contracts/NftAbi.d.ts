/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.47.0
  Forc version: 0.40.1
  Fuel-Core version: 0.19.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum TokenErrorInput { DoesNotExist = 'DoesNotExist', NotOwner = 'NotOwner', NotAuthorized = 'NotAuthorized', TransferToZeroIdentity = 'TransferToZeroIdentity' };
export enum TokenErrorOutput { DoesNotExist = 'DoesNotExist', NotOwner = 'NotOwner', NotAuthorized = 'NotAuthorized', TransferToZeroIdentity = 'TransferToZeroIdentity' };

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ApprovalEventInput = { owner: IdentityInput, spender: IdentityInput, token_id: BigNumberish };
export type ApprovalEventOutput = { owner: IdentityOutput, spender: IdentityOutput, token_id: BN };
export type ApprovalForAllEventInput = { owner: IdentityInput, operator: IdentityInput, approved: boolean };
export type ApprovalForAllEventOutput = { owner: IdentityOutput, operator: IdentityOutput, approved: boolean };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type TransferEventInput = { token_id: BigNumberish, from: Option<IdentityInput>, to: Option<IdentityInput> };
export type TransferEventOutput = { token_id: BN, from: Option<IdentityOutput>, to: Option<IdentityOutput> };

interface NftAbiInterface extends Interface {
  functions: {
    approvals: FunctionFragment;
    approve: FunctionFragment;
    balance_of: FunctionFragment;
    burn: FunctionFragment;
    is_approved_for_all: FunctionFragment;
    mint: FunctionFragment;
    owner_of: FunctionFragment;
    set_approval_for_all: FunctionFragment;
    transfer_from: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'approvals', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'approve', values: [IdentityInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'balance_of', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'burn', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'is_approved_for_all', values: [IdentityInput, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'mint', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'owner_of', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_approval_for_all', values: [IdentityInput, boolean]): Uint8Array;
  encodeFunctionData(functionFragment: 'transfer_from', values: [IdentityInput, IdentityInput, BigNumberish]): Uint8Array;

  decodeFunctionData(functionFragment: 'approvals', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'approve', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'balance_of', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'burn', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'is_approved_for_all', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'mint', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'owner_of', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_approval_for_all', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transfer_from', data: BytesLike): DecodedValue;
}

export class NftAbi extends Contract {
  interface: NftAbiInterface;
  functions: {
    approvals: InvokeFunction<[token_id: BigNumberish], Option<IdentityOutput>>;
    approve: InvokeFunction<[spender: IdentityInput, token_id: BigNumberish], void>;
    balance_of: InvokeFunction<[owner: IdentityInput], BN>;
    burn: InvokeFunction<[token_id: BigNumberish], void>;
    is_approved_for_all: InvokeFunction<[owner: IdentityInput, operator: IdentityInput], boolean>;
    mint: InvokeFunction<[to: IdentityInput], void>;
    owner_of: InvokeFunction<[token_id: BigNumberish], Option<IdentityOutput>>;
    set_approval_for_all: InvokeFunction<[operator: IdentityInput, approved: boolean], void>;
    transfer_from: InvokeFunction<[from: IdentityInput, to: IdentityInput, token_id: BigNumberish], void>;
  };
}
